CS3753 (Operating Systems)
Spring 2012
University of Colorado Boulder
Programming Assignment 2
Public Code

Author: Anne Gatchell
Feb 2013

{{
Adapted from Code by:
By Andy Sayler - 2012
http://www.andysayler.com

With help from:
Junho Ahn - 2012

Adopted from previous code by
 Chris Wailes <chris.wailes@gmail.com> - 2010
 Wei-Te Chen <weite.chen@colorado.edu> - 2011
 Blaise Barney - pthread-hello.c
}}

---Folders---
input - names*.txt input files
handout - Assignment description and documentation

---Executables---
multi-lookup - The DELIVERABLE for this assignment; a multipthreaded
	DNS query-er
lookup - A basic non-threaded DNS query-er
queueTest - Unit test program for queue
pthread-hello ; A simple threaded "Hello World" program

---Examples---
Build:
 make

Clean:
 make clean

DELIVERABLE:
Multithreaded Lookup DNS info for all names in input folder:
 ./multi-lookup input/names*.txt results.txt

Lookup DNS info for all names files in input folder:
 ./lookup input/names*.txt results.txt

Check queue for memory leaks:
 valgrind ./multi-lookup input/names*.txt results.txt
 valgrind ./queueTest

Run pthread-hello
 ./pthread-hello


Description:
Multithreaded DNS requester-resolution engine.

Determines the number of threads to use at runtime
based on the number of cores the machine has, using the 
equation:

number_of_threads = number_available_cores/(1 - blocking_coefficient)

Since this is an I/O intensive application, use blocking_coefficient
of 0.9

One requester thread is run per input file. So, each thread opens 
the file is given in its argument, and it reads input 
names from it and adds them to the queue as the queue has room available. 
When the file has been read entirely, the thread 
finishes and exits.

The resolver threads are used to pop a domain name from the 
queue, look up its IP address, and then print both to an output file.
Threads exit when they discover that all the producer threads have 
finished (determined by looking at a thread-safe boolean variable)
and the queue is empty.
In order to make sure that all threads exit, the first exiting thread
 increments the full count semaphore many times in order to free any 
 threads from a fruitless blocking situation. Those threads then realize 
 the queue is empty and exit.